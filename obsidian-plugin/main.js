/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// main.ts
var main_exports = {};
__export(main_exports, {
  default: () => YourPalPlugin
});
module.exports = __toCommonJS(main_exports);
var import_obsidian = require("obsidian");
var DEFAULT_SETTINGS = {
  backendUrl: "http://localhost:8000"
};
var VIEW_TYPE_SEARCH = "yourpal-search-view";
var YourPalPlugin = class extends import_obsidian.Plugin {
  async onload() {
    await this.loadSettings();
    await this.checkBackendVersion();
    this.registerView(VIEW_TYPE_SEARCH, (leaf) => this.searchView = new SearchView(leaf, this));
    this.addRibbonIcon("search", "YourPal Search", () => {
      this.activateView();
    });
    this.addCommand({
      id: "open-yourpal-search",
      name: "Open YourPal Search",
      callback: () => {
        this.activateView();
      }
    });
    this.addSettingTab(new YourPalSettingTab(this.app, this));
  }
  async loadSettings() {
    this.settings = Object.assign({}, DEFAULT_SETTINGS, await this.loadData());
  }
  async saveSettings() {
    await this.saveData(this.settings);
  }
  async activateView() {
    const { workspace } = this.app;
    let leaf = null;
    const leaves = workspace.getLeavesOfType(VIEW_TYPE_SEARCH);
    if (leaves.length > 0) {
      leaf = leaves[0];
    } else {
      leaf = workspace.getRightLeaf(false);
      if (leaf) {
        await leaf.setViewState({ type: VIEW_TYPE_SEARCH, active: true });
      }
    }
    if (leaf) {
      workspace.revealLeaf(leaf);
    }
  }
  async sendHelloWorldRequest() {
    try {
      const response = await fetch(`${this.settings.backendUrl}/process`, {
        method: "POST",
        headers: {
          "Content-Type": "application/json"
        },
        body: JSON.stringify({
          action: "hello_world",
          content: ""
        })
      });
      if (!response.ok) {
        throw new Error(`HTTP error! status: ${response.status}`);
      }
      return response.json();
    } catch (error) {
      console.error("Error:", error);
      if (error instanceof TypeError && error.message.includes("Failed to fetch")) {
        throw new Error("Unable to connect to the backend. Please check your internet connection and backend URL.");
      }
      throw error;
    }
  }
  async sendIndexVaultRequest() {
    try {
      const vault = this.app.vault;
      const vaultName = vault.getName();
      const files = vault.getMarkdownFiles();
      const fileContents = {};
      const notice = new import_obsidian.Notice("Indexing vault...", 0);
      for (let i = 0; i < files.length; i++) {
        const file = files[i];
        const content = await vault.cachedRead(file);
        fileContents[file.path] = content;
        const progress = Math.round((i + 1) / files.length * 100);
        notice.setMessage(`Indexing file ${i + 1} of ${files.length} (${progress}%)`);
      }
      const response = await fetch(`${this.settings.backendUrl}/process`, {
        method: "POST",
        headers: {
          "Content-Type": "application/json"
        },
        body: JSON.stringify({
          action: "index_vault",
          content: [vaultName, fileContents]
        })
      });
      if (!response.ok) {
        throw new Error(`HTTP error! status: ${response.status}`);
      }
      notice.hide();
      return response.json();
    } catch (error) {
      console.error("Error:", error);
      if (error instanceof TypeError && error.message.includes("Failed to fetch")) {
        throw new Error("Unable to connect to the backend. Please check your internet connection and backend URL.");
      }
      throw error;
    }
  }
  async sendSearchVaultRequest(query) {
    try {
      const vault = this.app.vault;
      const vaultName = vault.getName();
      const response = await fetch(`${this.settings.backendUrl}/process`, {
        method: "POST",
        headers: {
          "Content-Type": "application/json"
        },
        body: JSON.stringify({
          action: "search_vault",
          content: [vaultName, query]
        })
      });
      if (!response.ok) {
        throw new Error(`HTTP error! status: ${response.status}`);
      }
      return response.json();
    } catch (error) {
      console.error("Error:", error);
      if (error instanceof TypeError && error.message.includes("Failed to fetch")) {
        throw new Error("Unable to connect to the backend. Please check your internet connection and backend URL.");
      }
      throw error;
    }
  }
  async checkBackendVersion() {
    try {
      const response = await fetch(`${this.settings.backendUrl}/version`);
      const version = await response.text();
      if (version !== this.manifest.version) {
        new import_obsidian.Notice(`Warning: Plugin version (${this.manifest.version}) does not match backend version (${version})`);
      }
    } catch (error) {
      console.error("Failed to check backend version:", error);
    }
  }
};
var SearchView = class extends import_obsidian.ItemView {
  constructor(leaf, plugin) {
    super(leaf);
    this.plugin = plugin;
  }
  getViewType() {
    return VIEW_TYPE_SEARCH;
  }
  getDisplayText() {
    return "YourPal Search";
  }
  async onOpen() {
    const container = this.containerEl.children[1];
    container.empty();
    const topSection = container.createEl("div", { cls: "yourpal-top-section" });
    const indexButton = topSection.createEl("button", { text: "Index Vault" });
    indexButton.addEventListener("click", async () => {
      try {
        const response = await this.plugin.sendIndexVaultRequest();
        new import_obsidian.Notice(response.result);
      } catch (error) {
        console.error("Error:", error);
        new import_obsidian.Notice(`Error: ${error.message}`);
      }
    });
    topSection.createEl("br");
    topSection.createEl("br");
    this.searchInput = topSection.createEl("input", {
      type: "text",
      placeholder: "Enter your search query"
    });
    this.searchResults = container.createEl("div", { cls: "yourpal-search-results" });
    this.searchInput.addEventListener("keydown", async (event) => {
      if (event.key === "Enter") {
        const query = this.searchInput.value;
        if (query) {
          try {
            const response = await this.plugin.sendSearchVaultRequest(query);
            this.displaySearchResults(response.result);
          } catch (error) {
            console.error("Error:", error);
            new import_obsidian.Notice(`Error: ${error.message}`);
          }
        }
      }
    });
    this.addStyle();
  }
  displaySearchResults(results) {
    this.searchResults.empty();
    const ul = this.searchResults.createEl("ul");
    for (const result of results) {
      const li = ul.createEl("li");
      const a = li.createEl("a", { text: result.file, href: "#" });
      a.addEventListener("click", (event) => {
        event.preventDefault();
        this.openFile(result.file);
      });
      li.createEl("span", { text: ` (${result.score.toFixed(2)})` });
    }
  }
  async openFile(filePath) {
    const file = this.app.vault.getAbstractFileByPath(filePath);
    if (file instanceof import_obsidian.TFile) {
      await this.app.workspace.getLeaf().openFile(file);
    } else {
      new import_obsidian.Notice(`File not found: ${filePath}`);
    }
  }
  addStyle() {
    const style = document.createElement("style");
    style.textContent = `
            .yourpal-top-section {
                margin-bottom: 20px;
            }
            .yourpal-top-section button {
                margin-bottom: 10px;
            }
            .yourpal-top-section input {
                width: 100%;
            }
            .yourpal-search-results ul {
                padding-left: 20px;
            }
            .yourpal-search-results li {
                margin-bottom: 5px;
            }
        `;
    document.head.append(style);
  }
};
var YourPalSettingTab = class extends import_obsidian.PluginSettingTab {
  constructor(app, plugin) {
    super(app, plugin);
    this.plugin = plugin;
  }
  display() {
    const { containerEl } = this;
    containerEl.empty();
    new import_obsidian.Setting(containerEl).setName("Backend URL").setDesc("Enter the URL of your YourPal backend").addText((text) => text.setPlaceholder("Enter URL").setValue(this.plugin.settings.backendUrl).onChange(async (value) => {
      this.plugin.settings.backendUrl = value;
      await this.plugin.saveSettings();
    }));
    new import_obsidian.Setting(containerEl).setName("Test Connection").setDesc("Test the connection to your backend").addButton((button) => button.setButtonText("Test").onClick(async () => {
      try {
        await this.plugin.sendHelloWorldRequest();
        new import_obsidian.Notice("Connection successful!");
      } catch (error) {
        new import_obsidian.Notice(`Connection failed: ${error.message}`);
      }
    }));
  }
};
